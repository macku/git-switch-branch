#!/usr/bin/env node

const util = require('util');
const exec = util.promisify(require('child_process').exec);
const prompts = require('prompts');
const chalk = require('chalk');

(async () => {
	try {
		const { stdout: refsResult } = await exec('git for-each-ref --sort=-committerdate "refs/heads/"');
		const refsRaw = refsResult.trim().replace(/\t/g, ' ').split('\n');
		
		const refs = refsRaw.map((ref) => {
			const [, commitHash, branchRef] = ref.match(/^([a-z0-9]+)\s[^\s]+\srefs\/heads\/(.+)$/);

			return { commitHash, branchRef };
		});

		const branches = await Promise.all(refs.map( async ({ commitHash, branchRef }) => {
			const { stdout: result } = await exec(`git log -1 --pretty="%ar\t%cn" ${commitHash}`);
			const [date, author] = result.trim().split('\t');

			const description = `${chalk.green(branchRef)}\t${chalk.yellow(`(${date})`)}\t${chalk.blue(author)}`;

			return { branchRef, description };
		}));

		const { branch } = await prompts({
		    type: 'select',
		    name: 'branch',
		    message: 'Select recent branch from the list (showing 10 most recent)',
		    choices: branches.map(({ branchRef, description }) => ({
		    	title: description,
		    	value: branchRef
		    })).slice(0, 10),
		    initial: 0
		});

		if (!branch) {
			process.exit();
		}

		const { stdout: gitResult, stderr: error } = await exec(`git co ${branch}`);

		console.log(`${chalk.bold('Branch switched to:')} ${chalk.green(branch)}`);
	} catch(error) {
		console.log(`${chalk.bold('Ups. Cannot switch to branch due error:')}\n\n${chalk.red(error)}`);
		process.exit(1);
	}
})();